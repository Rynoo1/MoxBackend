// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoxBackEnd.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MoxBackEnd.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250406151625_RelationshipSetup")]
    partial class RelationshipSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MoxBackEnd.Models.FileUpload", b =>
                {
                    b.Property<int>("FileUploadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileUploadID"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FileUploadID");

                    b.HasIndex("ProjectID");

                    b.ToTable("FileUpload");
                });

            modelBuilder.Entity("MoxBackEnd.Models.Projects", b =>
                {
                    b.Property<int>("ProjectsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectsID"));

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProjectsID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MoxBackEnd.Models.Roles", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleID"));

                    b.Property<int>("ProjectID")
                        .HasColumnType("integer");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("RoleID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MoxBackEnd.Models.SubTasks", b =>
                {
                    b.Property<int>("SubTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubTaskID"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("SubTStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubTaskID");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("MoxBackEnd.Models.Tasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("boolean");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TaskId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MoxBackEnd.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("UEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SubTasksUsers", b =>
                {
                    b.Property<int>("AssignedSubTasksSubTaskID")
                        .HasColumnType("integer");

                    b.Property<int>("AssignedUsersUserID")
                        .HasColumnType("integer");

                    b.HasKey("AssignedSubTasksSubTaskID", "AssignedUsersUserID");

                    b.HasIndex("AssignedUsersUserID");

                    b.ToTable("SubTaskUserAssignments", (string)null);
                });

            modelBuilder.Entity("MoxBackEnd.Models.FileUpload", b =>
                {
                    b.HasOne("MoxBackEnd.Models.Projects", "Project")
                        .WithMany("FileUploads")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MoxBackEnd.Models.Roles", b =>
                {
                    b.HasOne("MoxBackEnd.Models.Projects", "Project")
                        .WithMany("Roles")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoxBackEnd.Models.Users", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoxBackEnd.Models.SubTasks", b =>
                {
                    b.HasOne("MoxBackEnd.Models.Tasks", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("MoxBackEnd.Models.Projects", "Projects")
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentTask");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("MoxBackEnd.Models.Tasks", b =>
                {
                    b.HasOne("MoxBackEnd.Models.Projects", "Projects")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SubTasksUsers", b =>
                {
                    b.HasOne("MoxBackEnd.Models.SubTasks", null)
                        .WithMany()
                        .HasForeignKey("AssignedSubTasksSubTaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoxBackEnd.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("AssignedUsersUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoxBackEnd.Models.Projects", b =>
                {
                    b.Navigation("FileUploads");

                    b.Navigation("Roles");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MoxBackEnd.Models.Tasks", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("MoxBackEnd.Models.Users", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
